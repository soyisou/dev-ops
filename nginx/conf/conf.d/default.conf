server {

    listen       80;
    # 服务器公网IP（或者使用服务器局域网IP均可，但不能是localhost）
    server_name  39.108.218.39;
    # server_name  172.25.100.19;

    # 首页
    index index.html;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    # 表示在该位置下的请求将被代理到另一个服务器，并在请求到达之前进行身份验证。
    location /api/ { # 对于 URI 匹配 /api/ 的请求，将使用以下配置进行处理
        # 这一行指示 Nginx 在代理请求到达之前向指定的 URI 发送一个子请求，以进行身份验证。
        auth_request /auth;

        # 鉴权通过后的处理方式
        # 具体来讲，这一行指示 Nginx 将通过代理将请求转发到本地主机上的端口 8080，路径为 /success。
        # 换句话说，对于通过身份验证的请求，Nginx 将转发请求到本地主机的端口 8080 上的 /success 路径，
        # 以便由后端服务处理该请求。
        proxy_pass http://39.108.218.39:8080/success;
        # proxy_pass http://172.25.100.19:8080/success;
    }

    # = auth 是绝对匹配，没有 = 号就是前缀匹配。
    location = /auth {
        # 发送子请求到HTTP服务，验证客户端的凭据，返回响应码

        # 设置为内部请求，不对外部请求提供服务
        internal;

        # 定义一个变量 $query，用于存储请求中的查询参数。
        set $query '';
        # 从请求的 URI 中提取查询参数，并将其存储在 $query 变量中。
        if ($request_uri ~* "[^\?]+\?(.*)$") {
            # ~* 是一个用于匹配正则表达式的修饰符。它用于表示正则表达式匹配时不区分大小写。
            # ~ 用于区分大小写匹配，而 ~* 则用于不区分大小写匹配。
            set $query $1;
        }

        # 将请求代理到指定的地址，并附带原始请求的查询参数。验证成功，返回200 OK
        proxy_pass http://39.108.218.39:8080/verify?$query;
        # proxy_pass http://172.25.100.19:8080/verify?$query;

        # 关闭传递请求体。
        proxy_pass_request_body off;

        # 清空 Content-Type
        proxy_set_header Content-Type "";
     }

    # location = /40x.html 和 location = /50x.html 块：分别处理 404 和 50x 错误页面的请求。
    # 当发生 404 错误时，返回 /404.html 页面。
    error_page 404 /404.html;
        location = /40x.html {

        }

    # 当发生 500、502、503 或 504 错误时，返回 /50x.html 页面。
    error_page   500 502 503 504  /50x.html;

     location = /50x.html {
     }
}